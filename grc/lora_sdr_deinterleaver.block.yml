# auto-generated by grc.converter

id: lora_sdr_deinterleaver
label: Deinterleaver
category: '[LoRa_RX]'
flags: [python,cpp]

parameters:
-   id: soft_decoding
    label: Soft_Decoding
    dtype: bool
    default: 'soft_decoding'
    options: [False, True]
-   id: legacy_sf56
    label: legacy_sf56
    dtype: bool
    hide: part
    default: False
    options: [False, True]
inputs:
-   domain: stream
    dtype: ${ 'f64' if soft_decoding else 'short'}
    vlen: ${ 12 if soft_decoding else 1} #12 is the max number of bits per symbol

cpp_templates:
    includes: ['#include <gnuradio/lora_sdr/deinterleaver.h>']
    declarations: 'lora_sdr::deinterleaver::sptr ${id};'
    make: 'this->${id} = lora_sdr::deinterleaver::make(${soft_decoding},${legacy_sf56});'
    packages: ['gnuradio-lora_sdr']
    link: ['gnuradio::gnuradio-lora_sdr']
    translations:
        'False': 'false'
        'True': 'true'
        \[: '{'
        \]: '}'

outputs:
-   domain: stream
    dtype: ${ 'f64' if soft_decoding else 'byte'}
    vlen: ${ 8 if soft_decoding else 1}

templates:
    imports: import gnuradio.lora_sdr as lora_sdr
    make: lora_sdr.deinterleaver( ${soft_decoding},${legacy_sf56})

documentation: |-
    Deinterleave the received codewords.
        Parameters:
            sodt_decoding: use soft-decision decoding
            sf: spreading factor
            legacy_sf56: Use legacy SF5/6 encoding  used by sx127x generation of chips
        Input:
            in: stream of received (gray demapped) decimal values
        Output:
            out: stream of deinterleaved codewords (one per byte)

file_format: 1
